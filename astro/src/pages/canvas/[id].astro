---
import { cn } from "../../lib/utils";
import ActionMenu from "../../components/action-menu.astro";
import Layout from '../../layouts/Layout.astro';
---
<Layout>
<main class="flex">
    <ActionMenu />
      <canvas
        class="h-screen svg-bg"
        style={{
		width: '49.95%',
        }}
        id="source"
      />
      <div class="h-screen w-[0.1%] bg-zinc-400" id="separator" />
      <canvas
        style={{
		width: '49.95%',
        }}
         class={cn('h-screen svg-bg')}
        id="destination"
      />
</main>
<script>
  const id = window.location.pathname.split('/')[2];
  import type { CanvasLayout } from "../../lib/types";
  import { useGrabcutCanvas } from "../../hooks/use-canvas";
  let canvasLayout = {
    value: 'both' as CanvasLayout,
  }
  const {
    applyMaskToImage,
    undo,
    redo,
    actions,
    redoActions,
    zoomIn,
    zoomOut,
    isZooming,
    resetToOriginal,
    currentMode,
    saveResult,
    isRemovingBackground,
    updateCanvasLayout,
  } = useGrabcutCanvas({
    id,
    canvasLayout: canvasLayout.value,
  });
  const $sourceCanvas = document.getElementById('source') as HTMLCanvasElement;
  const $destinationCanvas = document.getElementById('destination') as HTMLCanvasElement;
  const $separator = document.getElementById('separator') as HTMLElement;
  const $cutBtn = document.getElementById('cut-btn');
  $cutBtn?.addEventListener('click', applyMaskToImage);
  const $addBtn = document.getElementById('add-btn');
  $addBtn?.addEventListener('click', () => currentMode.value = 'draw-green');
  const $removeBtn = document.getElementById('remove-btn');
  $removeBtn?.addEventListener('click', () => currentMode.value = 'draw-red');
  const $hairBtn = document.getElementById('hair-btn');
  $hairBtn?.addEventListener('click', () => currentMode.value = 'draw-yellow');
  const $eraseBtn = document.getElementById('erase-btn');
  $eraseBtn?.addEventListener('click', () => {
    currentMode.value = 'erase'
  });
  const $undoBtn = document.getElementById('undo-btn');
  $undoBtn?.addEventListener('click', undo);
  const $redoBtn = document.getElementById('redo-btn');
  $redoBtn?.addEventListener('click', redo);
  const $zoomInBtn = document.getElementById('zoom-in-btn');
  
  function getZoomCenter() {
    return {
      x: canvasLayout.value === 'result' 
        ? window.innerWidth / 2 
        : canvasLayout.value === 'mask'
        ? window.innerWidth / 2
        : window.innerWidth / 4,
      y: window.innerHeight / 2,
    };
  }
  
  $zoomInBtn?.addEventListener('mousedown', () => {
    zoomIn(getZoomCenter());
  });
  $zoomInBtn?.addEventListener('mouseup', () => {
    isZooming.value = false;
  });
  const $zoomOutBtn = document.getElementById('zoom-out-btn');
  $zoomOutBtn?.addEventListener('mousedown', () => {
    zoomOut(getZoomCenter());
  });
  $zoomOutBtn?.addEventListener('mouseup', () => {
    isZooming.value = false;
  });
  const $resetBtn = document.getElementById('reset-btn');
  $resetBtn?.addEventListener('click', resetToOriginal);
  const $moveBtn = document.getElementById('move-btn');
  $moveBtn?.addEventListener('click', () => currentMode.value = 'move');
  const $windowBtn = document.getElementById('window-btn');
  $windowBtn?.addEventListener('click', () => {
    if ($sourceCanvas && $destinationCanvas && $separator) {
      const previousLayout = canvasLayout.value;
      canvasLayout.value = 'mask'
      $sourceCanvas.style.width = '100%';
      $destinationCanvas.style.width = '100%';
      $sourceCanvas.hidden = false;
      $destinationCanvas.hidden = true;
      $separator.style.display = 'none';
      updateCanvasLayout(canvasLayout.value, previousLayout);
    }
  });
  const $resultBtn = document.getElementById('result-btn');
  $resultBtn?.addEventListener('click', () => {
    if ($sourceCanvas && $destinationCanvas && $separator) {
      const previousLayout = canvasLayout.value;
      canvasLayout.value = 'result'
      $sourceCanvas.style.width = '100%';
      $destinationCanvas.style.width = '100%';
      $sourceCanvas.hidden = true;
      $destinationCanvas.hidden = false;
      $separator.style.display = 'none';
      updateCanvasLayout(canvasLayout.value, previousLayout);
    }
  });
  const $columnsBtn = document.getElementById('columns-btn');
  $columnsBtn?.addEventListener('click', () => {
    if ($sourceCanvas && $destinationCanvas && $separator) {
      const previousLayout = canvasLayout.value;
      canvasLayout.value = 'both'
      $sourceCanvas.style.width = '49.95%';
      $destinationCanvas.style.width = '49.95%';
      $sourceCanvas.hidden = false;
      $destinationCanvas.hidden = false;
      $separator.style.display = 'block';
      updateCanvasLayout(canvasLayout.value, previousLayout);
    }
  });
  const $downloadBtn = document.getElementById('download-btn');
  $downloadBtn?.addEventListener('click', () => saveResult());
</script>
</Layout>
